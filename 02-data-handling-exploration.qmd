---
title : " 파이썬을 이용한 데이터 핸들링 및 탐색: Pandas DataFrame 기초"

format: 
    html: 
        code-fold: false
jupyter: python3
---
::: callout-note
## 📌 핵심 요약

Pandas DataFrame은 파이썬에서 표 형태의 데이터를 다루는 데 필수적인 자료 구조입니다. 이 절에서는 DataFrame 생성, 정보 확인, 인덱싱, 슬라이싱, 데이터 조작 등 기본적인 사용법을 학습합니다.
:::

##   2.1 파이썬을 이용한 데이터 핸들링 및 탐색: Pandas DataFrame 기초

사회과학 연구에서 데이터를 수집하고 분석하는 과정은 종종 복잡하고 방대한 양의 데이터를 다루는 것을 포함합니다. 파이썬의 Pandas 라이브러리는 이러한 데이터를 효율적으로 처리하고 분석하는 데 필수적인 도구입니다. 본 절에서는 Pandas의 핵심 자료 구조인 DataFrame을 중심으로, 데이터 핸들링 및 탐색의 기초를 다룹니다.

* **(시각 자료 예시:** Pandas DataFrame의 구조를 보여주는 그림. 행과 열, 열 이름, 인덱스 등을 명확하게 표시한 표 형태의 그림)

###   2.1.1 Pandas DataFrame의 개념

Pandas DataFrame은 2차원 테이블 형태의 데이터 구조로서, 행(Row)과 열(Column)로 구성됩니다. 각 열은 서로 다른 데이터 유형(숫자, 문자열, 날짜 등)을 가질 수 있으며, 스프레드시트나 SQL 테이블과 유사한 구조를 갖습니다.

DataFrame은 다음과 같은 특징을 가집니다.

* **다양한 데이터 유형 처리:** 각 열은 서로 다른 데이터 유형을 가질 수 있습니다.
* **레이블 기반 인덱싱:** 행과 열에 레이블(이름)을 사용하여 데이터에 접근할 수 있습니다.
* **결측치 처리:** 결측치(Missing Data)를 효율적으로 처리하는 기능을 제공합니다.
* **데이터 조작 기능:** 데이터 필터링, 정렬, 그룹화, 병합 등 다양한 데이터 조작 기능을 제공합니다.

###   2.1.2 DataFrame 생성

DataFrame은 다양한 방법으로 생성할 수 있습니다.

* **(시각 자료 예시:** DataFrame 생성 방법을 보여주는 그림. 리스트, 딕셔너리, CSV 파일 등 다양한 입력 소스로부터 DataFrame을 생성하는 과정을 간략하게 보여주는 그림)

* **리스트(List)로부터 생성:**

    * 2차원 리스트를 사용하여 DataFrame을 생성할 수 있습니다.
    * 각 내부 리스트는 DataFrame의 한 행을 나타냅니다.

```{python}
    import pandas as pd

    data = [['Alice', 25, 'Female'], ['Bob', 30, 'Male'], ['Charlie', 28, 'Male']]
    df = pd.DataFrame(data, columns=['Name', 'Age', 'Gender'])
    print(df)
```

* **딕셔너리(Dictionary)로부터 생성:**

    * 딕셔너리를 사용하여 DataFrame을 생성할 수 있습니다.
    * 딕셔너리의 키(Key)는 DataFrame의 열 이름이 되고, 값(Value)은 열 데이터가 됩니다.

```{python}
    data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 28], 'Gender': ['Female', 'Male', 'Male']}
    df = pd.DataFrame(data)
    print(df)
    df.to_csv('data.csv', index=False) # DataFrame을 data.csv 파일로 저장 (index 제외)
```

* **CSV 파일로부터 생성:**

    * CSV(Comma Separated Values) 파일로부터 DataFrame을 생성할 수 있습니다.
    * `pd.read_csv()` 함수를 사용합니다.

```{python}
    df = pd.read_csv('data.csv') # data.csv 파일로부터 DataFrame 생성
    print(df)
```

|   생성 방법   |                       설명                       |                       예시                       |
| :-----------: | :--------------------------------------------: | :------------------------------------------------: |
|   리스트 생성   |           2차원 리스트를 사용하여 생성           | `pd.DataFrame(data, columns=['Name', 'Age', 'Gender'])` |
|   딕셔너리 생성   |           딕셔너리를 사용하여 생성           |                 `pd.DataFrame(data)`                 |
|   CSV 파일 생성   |           CSV 파일로부터 생성           |                   `pd.read_csv('data.csv')`                   |

###   2.1.3 DataFrame 정보 확인

DataFrame의 구조, 데이터 유형, 결측치 정보 등을 확인하는 것은 데이터 분석의 첫 단계입니다.

* **(시각 자료 예시:** DataFrame 정보 확인 방법을 보여주는 그림. `head()`, `info()`, `describe()` 등의 함수를 사용하여 DataFrame의 일부 데이터, 구조, 통계량 등을 확인하는 과정을 간략하게 보여주는 그림)

* **`head()`:**

    * DataFrame의 처음 몇 행을 표시합니다.
    * 기본적으로 처음 5행을 표시하며, 괄호 안에 숫자를 넣어 표시할 행 수를 지정할 수 있습니다.

```{python}
    print(df.head()) # 처음 5행 표시
    print(df.head(10)) # 처음 10행 표시
```

* **`info()`:**

    * DataFrame의 구조, 열 이름, 데이터 유형, 결측치 개수 등을 요약하여 표시합니다.

```{python}
    print(df.info())
```

* **`describe()`:**

    * 수치형 열에 대한 기술 통계량(평균, 표준편차, 최소값, 최대값, 사분위수 등)을 요약하여 표시합니다.

```{python}
    print(df.describe())
```

|   확인 함수   |                       설명                       |                       예시                       |
| :-----------: | :--------------------------------------------: | :------------------------------------------------: |
|    `head()`   |               DataFrame의 처음 몇 행 표시               |                   `df.head()`                   |
|    `info()`   |            DataFrame의 구조, 데이터 유형, 결측치 정보 확인            |                   `df.info()`                   |
|  `describe()`  |               수치형 열의 기술 통계량 요약               |                 `df.describe()`                 |

###   2.1.4 DataFrame 인덱싱 및 슬라이싱

DataFrame에서 특정 데이터에 접근하거나, 특정 행 또는 열을 선택하는 것을 인덱싱(Indexing) 및 슬라이싱(Slicing)이라고 합니다.

* **(시각 자료 예시:** DataFrame 인덱싱 및 슬라이싱 방법을 보여주는 그림. `[]`, `loc[]`, `iloc[]` 등을 사용하여 특정 데이터에 접근하거나, 행/열을 선택하는 과정을 간략하게 보여주는 그림)

* **`[]` 연산자:**

    * 열 이름을 사용하여 열을 선택합니다.

```{python}
    print(df['Name']) # 'Name' 열 선택
    print(df[['Name', 'Age']]) # 'Name'과 'Age' 열 선택
```

* **`loc[]` 메서드:**

    * 행과 열의 레이블을 사용하여 데이터에 접근합니다.

```{python}
    print(df.loc[0]) # 0번 행 선택
    print(df.loc[0:2, 'Name']) # 0번부터 2번 행까지, 'Name' 열 선택
    print(df.loc[:, ['Name', 'Age']]) # 모든 행, 'Name'과 'Age' 열 선택
```

* **`iloc[]` 메서드:**

    * 행과 열의 정수 인덱스를 사용하여 데이터에 접근합니다.

```{python}
    print(df.iloc[0]) # 0번 행 선택
    print(df.iloc[0:2, 0]) # 0번부터 2번 행까지, 0번 열 선택
    print(df.iloc[:, [0, 1]]) # 모든 행, 0번과 1번 열 선택
```

|   인덱싱/슬라이싱 방법   |                       설명                       |                       예시                       |
| :-------------------: | :--------------------------------------------: | :------------------------------------------------: |
|        `[]`        |                   열 이름으로 열 선택                   |                 `df['Name']`                 |
|       `loc[]`       |               행/열 레이블로 데이터 접근               |               `df.loc[0:2, 'Name']`               |
|       `iloc[]`       |               행/열 정수 인덱스로 데이터 접근               |               `df.iloc[:, [0, 1]]`               |

###   2.1.5 DataFrame 데이터 조작

DataFrame은 다양한 데이터 조작 기능을 제공합니다.

* **(시각 자료 예시:** DataFrame 데이터 조작 방법을 보여주는 그림. 새로운 열 추가, 열 삭제, 데이터 필터링, 정렬 등을 수행하는 과정을 간략하게 보여주는 그림)

* **새로운 열 추가:**

```{python}
    df['Salary'] = [50000, 60000, 55000] # 'Salary' 열 추가
    df['Age_Plus_10'] = df['Age'] + 10 # 'Age' 열을 이용하여 'Age_Plus_10' 열 추가
```


* **데이터 필터링:**

```{python}
    df_filtered = df[df['Age'] > 28] # 'Age' 열이 28보다 큰 행만 선택
    df_filtered = df[(df['Age'] > 25) & (df['Gender'] == 'Male')] # 'Age' 열이 25보다 크고 'Gender' 열이 'Male'인 행만 선택
```

* **데이터 정렬:**

```{python}
    df_sorted = df.sort_values(by='Age', ascending=True) # 'Age' 열을 기준으로 오름차순 정렬
    df_sorted = df.sort_values(by=['Gender', 'Age'], ascending=[True, False]) # 'Gender' 열을 기준으로 오름차순 정렬 후, 'Age' 열을 기준으로 내림차순 정렬
```

|   조작 방법   |                       설명                       |                       예시                       |
| :-----------: | :--------------------------------------------: | :------------------------------------------------: |
|   새로운 열 추가   |                   DataFrame에 새로운 열 추가                   |           `df['Salary'] = [50000, 60000, 55000]`           |
|     열 삭제     |                     DataFrame에서 열 삭제                     |               `df = df.drop(columns=['Gender'])`               |
|   데이터 필터링   |                 특정 조건을 만족하는 행만 선택                 |                `df[df['Age'] > 28]`                |
|   데이터 정렬   |                   DataFrame의 행을 특정 열을 기준으로 정렬                   |             `df.sort_values(by='Age')`             |

* **열 삭제:**

```{python}
    df = df.drop(columns=['Gender']) # 'Gender' 열 삭제
```


###   2.1.6 DataFrame 활용의 중요성

Pandas DataFrame은 사회과학 연구 데이터를 효율적으로 관리하고 분석하는 데 필수적인 도구입니다. DataFrame을 통해 데이터를 구조화하고, 다양한 데이터 조작 기능을 활용함으로써, 연구자는 데이터 분석 과정을 체계적으로 수행하고, 연구 결과의 신뢰성을 높일 수 있습니다.

---

코드 셀 포맷을 변경하여 2.1절을 다시 작성했습니다.